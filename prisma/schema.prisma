generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                   String                      @id @default(uuid())
  username             String                      @unique
  email                String
  phone                String?
  website              String?
  avatar               String?
  background           String?
  facebook             String?
  linkedin             String?
  twitter              String?
  xing                 String?
  bio                  String?
  skills               String[]
  interests            String[]
  academicTitle        String?                     @map("academic_title")
  createdAt            DateTime                    @default(now()) @map("created_at")
  firstName            String                      @map("first_name")
  lastName             String                      @map("last_name")
  publicFields         String[]                    @map("public_fields")
  termsAccepted        Boolean                     @map("terms_accepted")
  termsAcceptedAt      DateTime                    @default(now()) @map("terms_accepted_at")
  updatedAt            DateTime                    @default(now()) @map("updated_at")
  position             String?
  instagram            String?
  youtube              String?
  score                Int                         @default(0)
  areas                AreasOnProfiles[]
  memberOf             MemberOfOrganization[]
  offers               OffersOnProfiles[]
  participatedEvents   ParticipantOfEvent[]
  seekings             SeekingsOnProfiles[]
  contributedEvents    SpeakerOfEvent[]
  teamMemberOfEvents   TeamMemberOfEvent[]
  teamMemberOfProjects TeamMemberOfProject[]
  waitingForEvents     WaitingParticipantOfEvent[]

  @@map("profiles")
}

model ProfileVisibility {
  id        String  @id @default(uuid())
  profileId String  @map("profile_id")
  email     Boolean @default(false)
  position  Boolean @default(false)
  phone     Boolean @default(false)
  bio       Boolean @default(false)
  skills    Boolean @default(false)
  interests Boolean @default(false)
  seekings  Boolean @default(false)
  offers    Boolean @default(false)
  website   Boolean @default(false)
  facebook  Boolean @default(false)
  linkedin  Boolean @default(false)
  twitter   Boolean @default(false)
  youtube   Boolean @default(false)
  instagram Boolean @default(false)
  xing      Boolean @default(false)

  @@map("profile_visibilities")
}

model AreasOnProfiles {
  profileId String
  areaId    String
  area      Area    @relation(fields: [areaId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, areaId])
  @@map("areas_on_profiles")
}

model SeekingsOnProfiles {
  profileId String
  offerId   String
  offer     Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, offerId])
  @@map("seekings_on_profiles")
}

model OffersOnProfiles {
  profileId String
  offerId   String
  offer     Offer   @relation(fields: [offerId], references: [id], onDelete: Cascade)
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, offerId])
  @@map("offers_on_profiles")
}

model Organization {
  id                     String                             @id @default(uuid())
  name                   String
  slug                   String                             @unique
  email                  String?
  phone                  String?
  street                 String?
  city                   String?
  website                String?
  logo                   String?
  background             String?
  facebook               String?
  linkedin               String?
  twitter                String?
  xing                   String?
  bio                    String?
  quote                  String?
  createdAt              DateTime                           @default(now()) @map("created_at")
  publicFields           String[]                           @map("public_fields")
  quoteAuthor            String?                            @map("quote_author")
  quoteAuthorInformation String?                            @map("quote_author_information")
  streetNumber           String?                            @map("street_number")
  supportedBy            String[]                           @map("supported_by")
  updatedAt              DateTime                           @default(now()) @map("updated_at")
  zipCode                String?                            @map("zip_code")
  instagram              String?
  youtube                String?
  score                  Int                                @default(0)
  areas                  AreasOnOrganizations[]
  focuses                FocusesOnOrganizations[]
  networkMembers         MemberOfNetwork[]                  @relation("network")
  memberOf               MemberOfNetwork[]                  @relation("network_member")
  teamMembers            MemberOfOrganization[]
  types                  OrganizationTypesOnOrganizations[]
  responsibleForEvents   ResponsibleOrganizationOfEvent[]
  responsibleForProject  ResponsibleOrganizationOfProject[]

  @@map("organizations")
}

model OrganizationTypesOnOrganizations {
  organizationId     String
  organizationTypeId String
  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationType   OrganizationType @relation(fields: [organizationTypeId], references: [id], onDelete: Cascade)

  @@id([organizationId, organizationTypeId])
  @@map("organization_types_on_organizations")
}

model FocusesOnOrganizations {
  organizationId String
  focusId        String
  focus          Focus        @relation(fields: [focusId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([organizationId, focusId])
  @@map("focuses_on_organizations")
}

model MemberOfOrganization {
  profileId      String
  organizationId String
  isPrivileged   Boolean      @default(false)
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, organizationId])
  @@map("members_of_organizations")
}

model MemberOfNetwork {
  networkId       String
  networkMemberId String
  createdAt       DateTime     @default(now()) @map("created_at")
  network         Organization @relation("network", fields: [networkId], references: [id], onDelete: Cascade)
  networkMember   Organization @relation("network_member", fields: [networkMemberId], references: [id], onDelete: Cascade)

  @@id([networkId, networkMemberId])
  @@map("members_of_networks")
}

model AreasOnOrganizations {
  organizationId String
  areaId         String
  area           Area         @relation(fields: [areaId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([organizationId, areaId])
  @@map("areas_on_organizations")
}

model Event {
  id                       String                           @id @default(uuid())
  name                     String
  slug                     String                           @unique
  startTime                DateTime                         @map("start_time")
  endTime                  DateTime                         @map("end_time")
  parentEventId            String?                          @map("parent_event_id")
  description              String?
  published                Boolean                          @default(false)
  createdAt                DateTime                         @default(now()) @map("created_at")
  updatedAt                DateTime                         @default(now()) @map("updated_at")
  experienceLevelId        String?                          @map("experience_level_id")
  background               String?
  conferenceLink           String?                          @map("conference_link")
  conferenceCode           String?                          @map("conference_code")
  participantLimit         Int?                             @map("participant_limit")
  participationUntil       DateTime                         @map("participation_until")
  venueName                String?                          @map("venue_name")
  venueStreet              String?                          @map("venue_street")
  venueStreetNumber        String?                          @map("venue_street_number")
  venueCity                String?                          @map("venue_city")
  venueZipCode             String?                          @map("venue_zip_code")
  canceled                 Boolean                          @default(false)
  stageId                  String?                          @map("stage_id")
  subline                  String?
  participationFrom        DateTime                         @default(now()) @map("participation_from")
  areas                    AreaOfEvent[]
  documents                DocumentOfEvent[]
  types                    TypeOfEvent[]
  experienceLevel          ExperienceLevel?                 @relation("experience_level_of_event", fields: [experienceLevelId], references: [id])
  parentEvent              Event?                           @relation("parent_of_event", fields: [parentEventId], references: [id], onDelete: Cascade)
  childEvents              Event[]                          @relation("parent_of_event")
  stage                    Stage?                           @relation("stage_of_event", fields: [stageId], references: [id])
  focuses                  FocusOfEvent[]
  participants             ParticipantOfEvent[]
  responsibleOrganizations ResponsibleOrganizationOfEvent[]
  speakers                 SpeakerOfEvent[]
  tags                     TagOfEvent[]
  targetGroups             TargetGroupOfEvent[]
  teamMembers              TeamMemberOfEvent[]
  waitingList              WaitingParticipantOfEvent[]

  @@map("events")
}

model TeamMemberOfEvent {
  eventId         String  @map("event_id")
  profileId       String  @map("profile_id")
  isPrivileged    Boolean @default(false)
  responsibileFor String?
  event           Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile         Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([eventId, profileId])
  @@map("team_members_of_events")
}

model ResponsibleOrganizationOfEvent {
  eventId        String       @map("event_id")
  organizationId String       @map("organization_id")
  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([eventId, organizationId])
  @@map("responsible_organizations_of_events")
}

model DocumentOfEvent {
  eventId    String   @map("event_id")
  documentId String   @map("document_id")
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([eventId, documentId])
  @@map("documents_of_events")
}

model AreaOfEvent {
  eventId String @map("event_id")
  areaId  String @map("area_id")
  area    Area   @relation(fields: [areaId], references: [id], onDelete: Cascade)
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([eventId, areaId])
  @@map("areas_of_events")
}

model WaitingParticipantOfEvent {
  profileId String   @map("profile_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, eventId])
  @@map("waiting_participants_of_events")
}

model TagOfEvent {
  tagId     String   @map("tag_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, eventId])
  @@map("tags_of_events")
}

model TypeOfEvent {
  eventTypeId String    @map("event_type_id")
  eventId     String    @map("event_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)

  @@id([eventTypeId, eventId])
  @@map("event_types_of_events")
}

model FocusOfEvent {
  eventId String @map("event_id")
  focusId String @map("focus_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  focus   Focus  @relation(fields: [focusId], references: [id], onDelete: Cascade)

  @@id([eventId, focusId])
  @@map("focuses_on_events")
}

model TargetGroupOfEvent {
  targetGroupId String      @map("target_group_id")
  eventId       String      @map("event_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  event         Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  targetGroup   TargetGroup @relation(fields: [targetGroupId], references: [id], onDelete: Cascade)

  @@id([targetGroupId, eventId])
  @@map("target_groups_of_events")
}

model ParticipantOfEvent {
  profileId String   @map("profile_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, eventId])
  @@map("participants_of_events")
}

model SpeakerOfEvent {
  profileId String   @map("profile_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now()) @map("created_at")
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([profileId, eventId])
  @@map("speakers_of_events")
}

model State {
  agsPrefix String     @unique
  name      String     @unique
  districts District[]
  areas     Area[]
}

model District {
  ags            String       @unique
  name           String
  stateAgsPrefix String
  type           DistrictType
  state          State        @relation(fields: [stateAgsPrefix], references: [agsPrefix])

  @@unique([name, stateAgsPrefix])
}

model Area {
  id                   String                 @id @default(uuid())
  name                 String
  type                 AreaType
  stateId              String?
  state                State?                 @relation(fields: [stateId], references: [agsPrefix])
  events               AreaOfEvent[]
  AreasOnOrganizations AreasOnOrganizations[]
  AreasOnProfiles      AreasOnProfiles[]

  @@map("areas")
}

model Offer {
  id                 String               @id @default(uuid())
  title              String               @unique
  OffersOnProfiles   OffersOnProfiles[]
  SeekingsOnProfiles SeekingsOnProfiles[]

  @@map("offer")
}

model OrganizationType {
  id            String                             @id @default(uuid())
  title         String                             @unique
  organizations OrganizationTypesOnOrganizations[]

  @@map("organization_types")
}

model Focus {
  id            String                   @id @default(uuid())
  title         String                   @unique
  events        FocusOfEvent[]
  organizations FocusesOnOrganizations[]

  @@map("focuses")
}

model TargetGroup {
  id          String                 @id @default(uuid())
  referenceId Int                    @unique
  slug        String                 @unique
  title       String                 @unique
  events      TargetGroupOfEvent[]
  projects    TargetGroupOfProject[]

  @@map("target_groups")
}

model ExperienceLevel {
  id          String  @id @default(uuid())
  title       String  @unique
  referenceId Int     @unique
  slug        String  @unique
  events      Event[] @relation("experience_level_of_event")

  @@map("experience_levels")
}

model EventType {
  id          String        @id @default(uuid())
  title       String        @unique
  referenceId Int           @unique
  slug        String        @unique
  events      TypeOfEvent[]

  @@map("event_types")
}

model Tag {
  id          String       @id @default(uuid())
  slug        String       @unique
  referenceId Int          @unique
  title       String       @unique
  events      TagOfEvent[]

  @@map("tags")
}

model Stage {
  id     String  @id @default(uuid())
  title  String  @unique
  slug   String  @unique
  events Event[] @relation("stage_of_event")

  @@map("stages")
}

model Document {
  id          String            @id @default(uuid())
  path        String
  mimeType    String            @map("mime_type")
  title       String?
  description String?
  createdAt   DateTime          @default(now()) @map("created_at")
  filename    String
  sizeInMB    Float             @map("size_in_mb")
  updatedAt   DateTime          @default(now()) @map("updated_at")
  extension   String
  events      DocumentOfEvent[]

  @@map("documents")
}

model Project {
  id                       String                             @id @default(uuid())
  name                     String
  slug                     String                             @unique
  logo                     String?
  background               String?
  headline                 String?
  excerpt                  String?
  description              String?
  email                    String?
  phone                    String?
  website                  String?
  street                   String?
  streetNumber             String?                            @map("street_number")
  zipCode                  String?                            @map("zip_code")
  facebook                 String?
  linkedin                 String?
  twitter                  String?
  youtube                  String?
  instagram                String?
  xing                     String?
  createdAt                DateTime                           @default(now()) @map("created_at")
  updatedAt                DateTime                           @default(now()) @map("updated_at")
  city                     String?
  awards                   AwardOfProject[]
  disciplines              DisciplineOfProject[]
  responsibleOrganizations ResponsibleOrganizationOfProject[]
  targetGroups             TargetGroupOfProject[]
  teamMembers              TeamMemberOfProject[]

  @@map("projects")
}

model Discipline {
  id          String                @id @default(uuid())
  referenceId Int                   @unique
  title       String                @unique
  slug        String                @unique
  projects    DisciplineOfProject[]

  @@map("disciplines")
}

model Award {
  id         String           @id @default(uuid())
  title      String
  slug       String           @unique
  logo       String
  subline    String
  date       DateTime         @default(now())
  shortTitle String?          @map("short_title")
  projects   AwardOfProject[]

  @@map("awards")
}

model TargetGroupOfProject {
  targetGroupId String      @map("target_group_id")
  projectId     String      @map("project_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  targetGroup   TargetGroup @relation(fields: [targetGroupId], references: [id], onDelete: Cascade)

  @@id([targetGroupId, projectId])
  @@map("target_groups_of_projects")
}

model DisciplineOfProject {
  disciplineId String     @map("discipline_id")
  projectId    String     @map("project_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  discipline   Discipline @relation(fields: [disciplineId], references: [id], onDelete: Cascade)
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([disciplineId, projectId])
  @@map("disciplines_of_projects")
}

model AwardOfProject {
  awardId   String   @map("award_id")
  projectId String   @map("project_id")
  createdAt DateTime @default(now()) @map("created_at")
  award     Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([awardId, projectId])
  @@map("awards_of_projects")
}

model ResponsibleOrganizationOfProject {
  projectId      String       @map("project_id")
  organizationId String       @map("organization_id")
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  project        Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, organizationId])
  @@map("responsible_organizations_of_projects")
}

model TeamMemberOfProject {
  profileId    String   @map("pprofile_id")
  projectId    String   @map("project_id")
  isPrivileged Boolean  @default(false) @map("is_privileged")
  createdAt    DateTime @default(now()) @map("created_at")
  profile      Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([profileId, projectId])
  @@map("team_members_of_projects")
}

view PublicProfile {
  id        String   @unique
  username  String
  email     String
  position  String?
  phone     String?
  bio       String?
  skills    String[]
  interests String[]
  seekings  String[]
  offers    String[]
  website   String?
  facebook  String?
  linkedin  String?
  twitter   String?
  youtube   String?
  instagram String?
  xing      String?
  score     Int

  @@map("public_profiles")
}

enum DistrictType {
  land
  urban

  @@map("district_types")
}

enum AreaType {
  country
  state
  district

  @@map("area_types")
}
