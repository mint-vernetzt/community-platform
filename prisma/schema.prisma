generator client {
  provider = "prisma-client-js"
}

generator jsonSchema {
  provider = "prisma-json-schema-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AreasOnProfiles {
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  areaId    String
  area      Area    @relation(fields: [areaId], references: [id])

  @@id([profileId, areaId])
  @@map("areas_on_profiles")
}

model AreasOnOrganizations {
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  areaId         String
  area           Area         @relation(fields: [areaId], references: [id])

  @@id([organizationId, areaId])
  @@map("areas_on_organizations")
}

model SeekingsOnProfiles {
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  offerId   String
  offer     Offer   @relation(fields: [offerId], references: [id])

  @@id([profileId, offerId])
  @@map("seekings_on_profiles")
}

model OffersOnProfiles {
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String
  offerId   String
  offer     Offer   @relation(fields: [offerId], references: [id])

  @@id([profileId, offerId])
  @@map("offers_on_profiles")
}

model OrganizationTypesOnOrganizations {
  organization       Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId     String
  organizationTypeId String
  organizationType   OrganizationType @relation(fields: [organizationTypeId], references: [id])

  @@id([organizationId, organizationTypeId])
  @@map("organization_types_on_organizations")
}

model MintFocusesOnOrganizations {
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  mintFocusId    String
  mintFocus      MintFocus    @relation(fields: [mintFocusId], references: [id])

  @@id([organizationId, mintFocusId])
  @@map("mint_focuses_on_organizations")
}

model Profile {
  id              String                 @id @default(uuid())
  username        String                 @unique
  firstName       String                 @map("first_name")
  lastName        String                 @map("last_name")
  academicTitle   String?                @map("academic_title")
  position        String?
  email           String
  phone           String?
  website         String?
  avatar          String?
  background      String?
  facebook        String?
  linkedin        String?
  twitter         String?
  xing            String?
  bio             String?
  skills          String[]
  interests       String[]
  publicFields    String[]               @map("public_fields")
  memberOf        MemberOfOrganization[]
  createdAt       DateTime               @default(now()) @map("created_at")
  updatedAt       DateTime               @default(now()) @map("updated_at")
  termsAccepted   Boolean                @map("terms_accepted")
  termsAcceptedAt DateTime               @default(now()) @map("terms_accepted_at")

  areas    AreasOnProfiles[]
  seekings SeekingsOnProfiles[]
  offers   OffersOnProfiles[]

  @@map("profiles")
}

model Organization {
  id                     String                             @id @default(uuid())
  name                   String
  slug                   String                             @unique
  email                  String?
  phone                  String?
  street                 String?
  streetNumber           String?                            @map("street_number")
  zipCode                String?                            @map("zip_code")
  city                   String?
  website                String?
  logo                   String?
  background             String?
  facebook               String?
  linkedin               String?
  twitter                String?
  xing                   String?
  bio                    String?
  types                  OrganizationTypesOnOrganizations[]
  quote                  String?
  quoteAuthor            String?                            @map("quote_author")
  quoteAuthorInformation String?                            @map("quote_author_information")
  mintFocuses            MintFocusesOnOrganizations[]
  supportedBy            String[]                           @map("supported_by")
  publicFields           String[]                           @map("public_fields")
  teamMembers            MemberOfOrganization[]
  // explicit many to many self-relation on prisma
  // relation points to id to search from
  // example: member of
  // organisatzion.id (member) --> "network_member" --> find related "network" entries --> get ids from field network
  memberOf               MemberOfNetwork[]                  @relation(name: "network_member")
  networkMembers         MemberOfNetwork[]                  @relation(name: "network")
  createdAt              DateTime                           @default(now()) @map("created_at")
  updatedAt              DateTime                           @default(now()) @map("updated_at")
  areas                  AreasOnOrganizations[]


  @@map("organizations")
}

model MemberOfOrganization {
  profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  isPrivileged   Boolean      @default(false)
  createdAt      DateTime     @default(now()) @map("created_at")

  @@id([profileId, organizationId])
  @@map("members_of_organizations")
}

model MemberOfNetwork {
  network         Organization @relation(fields: [networkId], references: [id], name: "network", onDelete: Cascade)
  networkId       String
  networkMember   Organization @relation(fields: [networkMemberId], references: [id], name: "network_member", onDelete: Cascade)
  networkMemberId String
  createdAt       DateTime     @default(now()) @map("created_at")

  @@id([networkId, networkMemberId])
  @@map("members_of_networks")
}

model State {
  agsPrefix String     @unique
  name      String     @unique
  districts District[]
  areas     Area[]
}

enum DistrictType {
  land
  urban

  @@map("district_types")
}

model District {
  ags            String       @unique
  name           String
  type           DistrictType
  state          State        @relation(fields: [stateAgsPrefix], references: [agsPrefix])
  stateAgsPrefix String

  @@unique([name, stateAgsPrefix])
}

enum AreaType {
  country
  state
  district

  @@map("area_types")
}

model Area {
  id      String   @id @default(uuid())
  name    String
  type    AreaType
  state   State?   @relation(fields: [stateId], references: [agsPrefix])
  stateId String?

  AreasOnProfiles      AreasOnProfiles[]
  AreasOnOrganizations AreasOnOrganizations[]
  @@map("areas")
}

model Offer {
  id    String @id @default(uuid())
  title String @unique

  SeekingsOnProfiles SeekingsOnProfiles[]
  OffersOnProfiles   OffersOnProfiles[]

  @@map("offer")
}

model OrganizationType {
  id            String                             @id @default(uuid())
  title         String                             @unique
  organizations OrganizationTypesOnOrganizations[]

  @@map("organization_types")
}

model MintFocus {
  id            String                       @id @default(uuid())
  title         String                       @unique
  organizations MintFocusesOnOrganizations[]

  @@map("mint_focuses")
}
