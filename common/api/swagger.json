{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "FieldErrors": {
        "properties": {},
        "type": "object",
        "additionalProperties": {
          "properties": {
            "value": {},
            "message": {
              "type": "string"
            }
          },
          "required": ["message"],
          "type": "object"
        }
      },
      "Pick_ValidateError.status-or-message-or-fields_": {
        "properties": {
          "status": {
            "type": "number",
            "format": "double"
          },
          "message": {
            "type": "string"
          },
          "fields": {
            "$ref": "#/components/schemas/FieldErrors"
          }
        },
        "required": ["status", "message", "fields"],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      },
      "Pick_Error.message_": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object",
        "description": "From T, pick a set of properties whose keys are in the union K"
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "access_token",
        "in": "query"
      }
    }
  },
  "info": {
    "title": "api",
    "version": "0.1.0",
    "contact": {}
  },
  "paths": {
    "/project/{slug}": {
      "get": {
        "operationId": "GetProject",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "targetGroups": {
                      "items": {
                        "properties": {
                          "targetGroup": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["targetGroup"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "disciplines": {
                      "items": {
                        "properties": {
                          "discipline": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["discipline"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "city": {
                      "type": "string"
                    },
                    "xing": {
                      "type": "string"
                    },
                    "instagram": {
                      "type": "string"
                    },
                    "youtube": {
                      "type": "string"
                    },
                    "twitter": {
                      "type": "string"
                    },
                    "linkedin": {
                      "type": "string"
                    },
                    "facebook": {
                      "type": "string"
                    },
                    "zipCode": {
                      "type": "string"
                    },
                    "streetNumber": {
                      "type": "string"
                    },
                    "street": {
                      "type": "string"
                    },
                    "website": {
                      "type": "string"
                    },
                    "phone": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "description": {
                      "type": "string"
                    },
                    "excerpt": {
                      "type": "string"
                    },
                    "headline": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "background": {
                      "type": "string"
                    },
                    "logo": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "targetGroups",
                    "disciplines",
                    "city",
                    "xing",
                    "instagram",
                    "youtube",
                    "twitter",
                    "linkedin",
                    "facebook",
                    "zipCode",
                    "streetNumber",
                    "street",
                    "website",
                    "phone",
                    "email",
                    "description",
                    "excerpt",
                    "headline",
                    "name",
                    "id",
                    "background",
                    "logo",
                    "url"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve a project by slug of the community including their public information.",
        "summary": "Retrieve project by slug.",
        "tags": ["Project"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/projects": {
      "get": {
        "operationId": "GetAllProjects",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "Example 1": {
                    "value": {
                      "result": [
                        {
                          "id": "d2bae762-e419-4a57-b12f-fdc01beb22d2",
                          "name": "Some Project",
                          "url": "https://community.platform.org/url/to/project",
                          "logo": "https://img.platform.org/public/url/of/project/logo",
                          "background": "https://img.platform.org/public/url/of/project/background",
                          "headline": "Using Different Learning Strategies In The Context Of Computer Science",
                          "excerpt": "Find new learning strategies that fit for individuals with different learning styles and ...",
                          "description": "Welcome to our project where we present and discuss multiple <strong>learning strategies</strong> in the context of computer science. In multiple workshops and keynote speeches we will explore strategies to ...",
                          "email": "learning@strategies.org",
                          "phone": "(+49) 176 / 123456789",
                          "street": "Learning Avenue",
                          "streetNumber": "181",
                          "city": "Educationtown",
                          "zipCode": "12345",
                          "website": "https://learning.strategies.org/",
                          "facebook": "https://facebook.com/learningStrategies",
                          "linkedin": "https://linkedin.com/company/learningStrategies",
                          "twitter": "https://twitter.com/learningStrategies",
                          "youtube": "https://youtube.com/learningStrategies",
                          "instagram": "https://instagram.com/learningStrategies",
                          "xing": "https://xing.com/pages/learningStrategies",
                          "disciplines": [
                            {
                              "discipline": {
                                "title": "Math"
                              }
                            },
                            {
                              "discipline": {
                                "title": "Computer Science"
                              }
                            }
                          ],
                          "targetGroups": [
                            {
                              "targetGroup": {
                                "title": "Elementary School"
                              }
                            },
                            {
                              "targetGroup": {
                                "title": "Early Childhood Education"
                              }
                            },
                            {
                              "targetGroup": {
                                "title": "Teachers"
                              }
                            }
                          ]
                        },
                        {
                          "id": "1916da3c-b401-49f3-91e6-173f01c6ddd8",
                          "name": "Smallest Project",
                          "url": null,
                          "logo": null,
                          "background": null,
                          "headline": null,
                          "excerpt": null,
                          "description": null,
                          "email": null,
                          "phone": null,
                          "street": null,
                          "streetNumber": null,
                          "city": null,
                          "zipCode": null,
                          "website": null,
                          "facebook": null,
                          "linkedin": null,
                          "twitter": null,
                          "youtube": null,
                          "instagram": null,
                          "xing": null,
                          "disciplines": [],
                          "targetGroups": []
                        }
                      ],
                      "skip": 0,
                      "take": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "A take parameter larger than 50 is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "number",
                      "enum": [400],
                      "nullable": false
                    },
                    "message": {
                      "type": "string",
                      "enum": ["Parameter out of range"],
                      "nullable": false
                    },
                    "fields": {
                      "properties": {
                        "take": {
                          "properties": {
                            "message": {
                              "type": "string",
                              "enum": [
                                "A take parameter larger than 50 is not allowed"
                              ],
                              "nullable": false
                            }
                          },
                          "required": ["message"],
                          "type": "object"
                        }
                      },
                      "required": ["take"],
                      "type": "object"
                    }
                  },
                  "required": ["status", "message", "fields"],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 422,
                      "message": "Validation failed",
                      "fields": {
                        "skip": {
                          "message": "'skip' is required"
                        },
                        "take": {
                          "message": "'take' is required"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves all projects of the community including their public information.\nThey do not include private (Community-only) fields.",
        "summary": "Retrieve all projects.",
        "tags": ["Projects"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The number of items to skip before starting to collect the result set",
            "in": "query",
            "name": "skip",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "The number of items to return (A take parameter larger than 50 is not allowed)",
            "in": "query",
            "name": "take",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/profile/{username}": {
      "get": {
        "operationId": "GetProfile",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "seekings": {
                      "items": {
                        "properties": {
                          "offer": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["offer"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "offers": {
                      "items": {
                        "properties": {
                          "offer": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["offer"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "lastName": {
                      "type": "string"
                    },
                    "firstName": {
                      "type": "string"
                    },
                    "academicTitle": {
                      "type": "string"
                    },
                    "bio": {
                      "type": "string"
                    },
                    "areas": {
                      "items": {
                        "properties": {
                          "area": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "required": ["name"],
                            "type": "object"
                          }
                        },
                        "required": ["area"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "email": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "background": {
                      "type": "string"
                    },
                    "avatar": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "seekings",
                    "offers",
                    "lastName",
                    "firstName",
                    "academicTitle",
                    "bio",
                    "areas",
                    "email",
                    "id",
                    "background",
                    "avatar",
                    "url"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve a profile by username of the community including their public information.",
        "summary": "Retrieve profile by username.",
        "tags": ["Profile"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/profiles": {
      "get": {
        "operationId": "GetAllEvents",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "Example 1": {
                    "value": {
                      "result": [
                        {
                          "id": "ffca2a3a-c0bf-4931-b65a-8d8ccf867096",
                          "firstName": "John",
                          "lastName": "Doe",
                          "academicTitle": "Dr.",
                          "email": "",
                          "url": null,
                          "avatar": "https://img.platform.org/public/url/of/profile/avatar",
                          "background": "https://img.platform.org/public/url/of/profile/background",
                          "bio": "I am a </strong>bio</strong>",
                          "areas": [
                            {
                              "area": {
                                "name": "India"
                              }
                            },
                            {
                              "area": {
                                "name": "Bavaria"
                              }
                            }
                          ],
                          "offers": [
                            {
                              "offer": {
                                "title": "Offer 1"
                              }
                            },
                            {
                              "offer": {
                                "title": "Offer 2"
                              }
                            }
                          ],
                          "seekings": [
                            {
                              "offer": {
                                "title": "Offer 1"
                              }
                            },
                            {
                              "offer": {
                                "title": "Offer 2"
                              }
                            }
                          ]
                        }
                      ],
                      "skip": 0,
                      "take": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "A take parameter larger than 50 is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "number",
                      "enum": [400],
                      "nullable": false
                    },
                    "message": {
                      "type": "string",
                      "enum": ["Parameter out of range"],
                      "nullable": false
                    },
                    "fields": {
                      "properties": {
                        "take": {
                          "properties": {
                            "message": {
                              "type": "string",
                              "enum": [
                                "A take parameter larger than 50 is not allowed"
                              ],
                              "nullable": false
                            }
                          },
                          "required": ["message"],
                          "type": "object"
                        }
                      },
                      "required": ["take"],
                      "type": "object"
                    }
                  },
                  "required": ["status", "message", "fields"],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 422,
                      "message": "Validation failed",
                      "fields": {
                        "skip": {
                          "message": "'skip' is required"
                        },
                        "take": {
                          "message": "'take' is required"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves all profiles of the community including their public information.\nThey do not include private (Community-only) fields.",
        "summary": "Retrieve all profiles.",
        "tags": ["Profiles"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The number of items to skip before starting to collect the result set",
            "in": "query",
            "name": "skip",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "The number of items to return (A take parameter larger than 50 is not allowed)",
            "in": "query",
            "name": "take",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/organization/{slug}": {
      "get": {
        "operationId": "GetOrganization",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "types": {
                      "items": {
                        "properties": {
                          "organizationType": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["organizationType"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "supportedBy": {
                      "items": {
                        "type": "string"
                      },
                      "type": "array"
                    },
                    "bio": {
                      "type": "string"
                    },
                    "areas": {
                      "items": {
                        "properties": {
                          "area": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "required": ["name"],
                            "type": "object"
                          }
                        },
                        "required": ["area"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "city": {
                      "type": "string"
                    },
                    "zipCode": {
                      "type": "string"
                    },
                    "streetNumber": {
                      "type": "string"
                    },
                    "street": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "background": {
                      "type": "string"
                    },
                    "logo": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "types",
                    "supportedBy",
                    "bio",
                    "areas",
                    "city",
                    "zipCode",
                    "streetNumber",
                    "street",
                    "name",
                    "id",
                    "background",
                    "logo",
                    "url"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve a organization by slug of the community including their public information.",
        "summary": "Retrieve organization by slug.",
        "tags": ["Organization"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/organizations": {
      "get": {
        "operationId": "GetAllOrganizations",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "Example 1": {
                    "value": {
                      "result": [
                        {
                          "id": "52907745-7672-470e-a803-a2f8feb52944",
                          "name": "Association For Love And Harmony",
                          "url": "https://community.platform.org/url/to/organization",
                          "logo": "https://img.platform.org/public/url/of/organization/logo",
                          "background": "https://img.platform.org/public/url/of/organization/background",
                          "bio": "I am a <strong>bio</strong>",
                          "street": "Freedom Road",
                          "streetNumber": "22",
                          "city": "City of Relief",
                          "zipCode": "12345",
                          "supportedBy": [
                            "Aung San Suu Kyi",
                            "Rigoberta Menchú",
                            "Nelson Mandela",
                            "Jody Williams"
                          ],
                          "areas": [
                            {
                              "area": {
                                "name": "India"
                              }
                            },
                            {
                              "area": {
                                "name": "Bavaria"
                              }
                            },
                            {
                              "area": {
                                "name": "New York City"
                              }
                            }
                          ],
                          "types": [
                            {
                              "organizationType": {
                                "title": "Association"
                              }
                            },
                            {
                              "organizationType": {
                                "title": "Company"
                              }
                            },
                            {
                              "organizationType": {
                                "title": "Initiative"
                              }
                            }
                          ]
                        },
                        {
                          "id": "87e17b22-4846-4234-9d88-01958ab61960",
                          "name": "Smallest Organization",
                          "url": null,
                          "logo": null,
                          "background": null,
                          "bio": null,
                          "street": null,
                          "streetNumber": null,
                          "city": null,
                          "zipCode": null,
                          "supportedBy": [],
                          "areas": [],
                          "types": []
                        }
                      ],
                      "skip": 0,
                      "take": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "A take parameter larger than 50 is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "number",
                      "enum": [400],
                      "nullable": false
                    },
                    "message": {
                      "type": "string",
                      "enum": ["Parameter out of range"],
                      "nullable": false
                    },
                    "fields": {
                      "properties": {
                        "take": {
                          "properties": {
                            "message": {
                              "type": "string",
                              "enum": [
                                "A take parameter larger than 50 is not allowed"
                              ],
                              "nullable": false
                            }
                          },
                          "required": ["message"],
                          "type": "object"
                        }
                      },
                      "required": ["take"],
                      "type": "object"
                    }
                  },
                  "required": ["status", "message", "fields"],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 422,
                      "message": "Validation failed",
                      "fields": {
                        "skip": {
                          "message": "'skip' is required"
                        },
                        "take": {
                          "message": "'take' is required"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves all organizations of the community including their public information.\nThey do not include private (Community-only) fields.",
        "summary": "Retrieve all organizations.",
        "tags": ["Organizations"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The number of items to skip before starting to collect the result set",
            "in": "query",
            "name": "skip",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "The number of items to return (A take parameter larger than 50 is not allowed)",
            "in": "query",
            "name": "take",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    },
    "/event/{slug}": {
      "get": {
        "operationId": "GetEvent",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "tags": {
                      "items": {
                        "properties": {
                          "tag": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["tag"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "stage": {
                      "properties": {
                        "title": {
                          "type": "string"
                        }
                      },
                      "required": ["title"],
                      "type": "object"
                    },
                    "experienceLevel": {
                      "properties": {
                        "title": {
                          "type": "string"
                        }
                      },
                      "required": ["title"],
                      "type": "object"
                    },
                    "participationFrom": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "canceled": {
                      "type": "boolean"
                    },
                    "venueZipCode": {
                      "type": "string"
                    },
                    "venueCity": {
                      "type": "string"
                    },
                    "venueStreetNumber": {
                      "type": "string"
                    },
                    "venueStreet": {
                      "type": "string"
                    },
                    "venueName": {
                      "type": "string"
                    },
                    "participationUntil": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "parentEventId": {
                      "type": "string"
                    },
                    "endTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "startTime": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "types": {
                      "items": {
                        "properties": {
                          "eventType": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["eventType"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "focuses": {
                      "items": {
                        "properties": {
                          "focus": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["focus"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "areas": {
                      "items": {
                        "properties": {
                          "area": {
                            "properties": {
                              "name": {
                                "type": "string"
                              }
                            },
                            "required": ["name"],
                            "type": "object"
                          }
                        },
                        "required": ["area"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "targetGroups": {
                      "items": {
                        "properties": {
                          "targetGroup": {
                            "properties": {
                              "title": {
                                "type": "string"
                              }
                            },
                            "required": ["title"],
                            "type": "object"
                          }
                        },
                        "required": ["targetGroup"],
                        "type": "object"
                      },
                      "type": "array"
                    },
                    "participantLimit": {
                      "type": "number",
                      "format": "double"
                    },
                    "description": {
                      "type": "string"
                    },
                    "subline": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "background": {
                      "type": "string"
                    },
                    "url": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "tags",
                    "stage",
                    "experienceLevel",
                    "participationFrom",
                    "canceled",
                    "venueZipCode",
                    "venueCity",
                    "venueStreetNumber",
                    "venueStreet",
                    "venueName",
                    "participationUntil",
                    "parentEventId",
                    "endTime",
                    "startTime",
                    "types",
                    "focuses",
                    "areas",
                    "targetGroups",
                    "participantLimit",
                    "description",
                    "subline",
                    "name",
                    "id",
                    "background",
                    "url"
                  ],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieve a event by slug of the community including their public information.",
        "summary": "Retrieve event by slug.",
        "tags": ["Event"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/events": {
      "get": {
        "operationId": "GetAllEvents",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "Example 1": {
                    "value": {
                      "result": [
                        {
                          "id": "a24004fa-aee8-40e2-aeb8-c6a40a1a2ee4",
                          "name": "Consensus in heterogeneous groups",
                          "slug": "event-slug",
                          "url": "https://community.platform.org/url/to/event",
                          "background": "https://img.platform.org/public/url/of/event/background",
                          "description": "Welcome to our event where we present and discuss multiple ways to find consensus in heterogeneous groups. In <strong>multiple workshops</strong> and keynote speeches we will explore strategies to ...",
                          "subline": "Discussing different approaches to find consensus",
                          "startTime": "2017-06-17T10:00:00.000Z",
                          "endTime": "2017-06-18T18:00:00.000Z",
                          "participationFrom": "2017-06-12T00:00:00.000Z",
                          "participationUntil": "2017-06-16T00:00:00.000Z",
                          "participantLimit": 20,
                          "venueName": "Meetingpalace",
                          "venueStreet": "Gatheringstreet",
                          "venueStreetNumber": "12",
                          "venueCity": "City of Happenings",
                          "venueZipCode": "12345",
                          "canceled": false,
                          "parentEventId": "some-parent-event-id",
                          "areas": [
                            {
                              "area": {
                                "name": "India"
                              }
                            },
                            {
                              "area": {
                                "name": "Bavaria"
                              }
                            },
                            {
                              "area": {
                                "name": "New York City"
                              }
                            }
                          ],
                          "types": [
                            {
                              "eventType": {
                                "title": "Exchange"
                              }
                            },
                            {
                              "eventType": {
                                "title": "Keynote"
                              }
                            },
                            {
                              "eventType": {
                                "title": "Workshop"
                              }
                            }
                          ],
                          "focuses": [
                            {
                              "focus": {
                                "title": "Social Media Management"
                              }
                            },
                            {
                              "focus": {
                                "title": "Politics"
                              }
                            },
                            {
                              "focus": {
                                "title": "Science"
                              }
                            },
                            {
                              "focus": {
                                "title": "Career Orientation"
                              }
                            }
                          ],
                          "tags": [
                            {
                              "tag": {
                                "title": "Didactics"
                              }
                            },
                            {
                              "tag": {
                                "title": "Gender"
                              }
                            },
                            {
                              "tag": {
                                "title": "Innovation"
                              }
                            },
                            {
                              "tag": {
                                "title": "Networking"
                              }
                            }
                          ],
                          "targetGroups": [
                            {
                              "targetGroup": {
                                "title": "Elementary School"
                              }
                            },
                            {
                              "targetGroup": {
                                "title": "Early Childhood Education"
                              }
                            },
                            {
                              "targetGroup": {
                                "title": "Teachers"
                              }
                            }
                          ],
                          "experienceLevel": {
                            "title": "Beginner"
                          },
                          "stage": {
                            "title": "Hybrid"
                          },
                          "_count": {
                            "participants": 20,
                            "waitingList": 3
                          },
                          "responsibleOrganizations": [
                            {
                              "organization": {
                                "name": "Platform",
                                "slug": "platform",
                                "logo": "https://img.platform.org/public/url/of/logo",
                                "url": "https://community.platform.org/url/to/organization"
                              }
                            }
                          ]
                        },
                        {
                          "id": "ffca2a3a-c0bf-4931-b65a-8d8ccf867096",
                          "name": "Smallest Event",
                          "slug": "smallest-event",
                          "url": null,
                          "background": null,
                          "description": null,
                          "subline": null,
                          "startTime": "2017-06-17T10:00:00.000Z",
                          "endTime": "2017-06-18T18:00:00.000Z",
                          "participationFrom": "2017-06-12T00:00:00.000Z",
                          "participationUntil": "2017-06-16T00:00:00.000Z",
                          "participantLimit": null,
                          "venueName": null,
                          "venueStreet": null,
                          "venueStreetNumber": null,
                          "venueCity": null,
                          "venueZipCode": null,
                          "canceled": true,
                          "parentEventId": null,
                          "areas": [],
                          "types": [],
                          "focuses": [],
                          "tags": [],
                          "targetGroups": [],
                          "experienceLevel": null,
                          "stage": null,
                          "_count": {
                            "participants": 0,
                            "waitingList": 0
                          },
                          "responsibleOrganizations": []
                        }
                      ],
                      "skip": 0,
                      "take": 2
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "A take parameter larger than 50 is not allowed",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "status": {
                      "type": "number",
                      "enum": [400],
                      "nullable": false
                    },
                    "message": {
                      "type": "string",
                      "enum": ["Parameter out of range"],
                      "nullable": false
                    },
                    "fields": {
                      "properties": {
                        "take": {
                          "properties": {
                            "message": {
                              "type": "string",
                              "enum": [
                                "A take parameter larger than 50 is not allowed"
                              ],
                              "nullable": false
                            }
                          },
                          "required": ["message"],
                          "type": "object"
                        }
                      },
                      "required": ["take"],
                      "type": "object"
                    }
                  },
                  "required": ["status", "message", "fields"],
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 401,
                      "message": "Authentication failed",
                      "fields": {
                        "access_token": {
                          "message": "Invalid access token"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation Failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pick_ValidateError.status-or-message-or-fields_"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 422,
                      "message": "Validation failed",
                      "fields": {
                        "skip": {
                          "message": "'skip' is required"
                        },
                        "take": {
                          "message": "'take' is required"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Pick_Error.message_"
                    },
                    {
                      "properties": {
                        "status": {
                          "type": "number",
                          "format": "double"
                        }
                      },
                      "required": ["status"],
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "status": 500,
                      "message": "Internal Server Error"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Retrieves all events of the community including their public information.\nThey do not include private (Community-only) fields.",
        "summary": "Retrieve all events.",
        "tags": ["Events"],
        "security": [
          {
            "api_key": []
          }
        ],
        "parameters": [
          {
            "description": "The number of items to skip before starting to collect the result set",
            "in": "query",
            "name": "skip",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          },
          {
            "description": "The number of items to return (A take parameter larger than 50 is not allowed)",
            "in": "query",
            "name": "take",
            "required": true,
            "schema": {
              "format": "double",
              "type": "number"
            }
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ]
}
